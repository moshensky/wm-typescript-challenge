{"version":3,"file":"static/js/293.e77ad1e5.chunk.js","mappings":"yg9BAGaA,EAAW,CCCEC,EAAAA,KAAAA,IAAS,oBAAoB,SAACC,EAAKC,EAAN,GAAyB,IAAZC,EAAW,EAAXA,KAC5DC,EAAS,CACbC,MAAQJ,EAAIK,IAAIC,aAAaC,IAAI,UAAuB,KACxDC,OAASR,EAAIK,IAAIC,aAAaC,IAAI,WAAwB,KAGtDH,EAAQK,SAASN,EAAOC,MAAO,IAC/BI,EAASC,SAASN,EAAOK,OAAQ,IAEvC,OAAOP,EACLC,EAAK,CACHC,OAAQH,EACRI,MAAAA,EACAI,OAAAA,EACAE,MAAOC,EAAAA,OACPC,KAAMD,EAAAA,MAAgBH,EAAQA,EAASJ,SCffL,EAAAA,KAAAA,IAC5B,wBACA,SAACC,EAAKC,EAAN,GACE,OAAOA,GACLC,EAFoB,EAAXA,MAEJ,CACHS,UAAAA,SCNKE,EAASC,EAAAA,YAAAA,WAAA,UAAehB,K,oECC9B,IAAMiB,EAAY,WACvBC,QAAQC,IAAI,uEACOC,EAAQ,MAAnBL,OACDM,MAAM,CACXC,gBAAgB,EAChBC,cAAe,CACbhB,IAAI,GAAD,OAAKiB,2BAAL,0BAELC,mBAAoB,SAACvB,QAIzBe","sources":["mocks/handlers.ts","mocks/handlers/allRecipes.ts","mocks/handlers/popularRecipes.ts","mocks/browser.ts","mocks/index.ts"],"sourcesContent":["import { allRecipes } from \"./handlers/allRecipes\";\nimport { popularRecipes } from \"./handlers/popularRecipes\";\n\nexport const handlers = [allRecipes, popularRecipes];\n","import { rest } from \"msw\";\n\nimport cocktails from \"../data/cocktails.json\";\n\nexport const allRecipes = rest.get(\"/api/recipes/all\", (req, res, { json }) => {\n  const params = {\n    limit: (req.url.searchParams.get(\"limit\") as string) || \"10\",\n    offset: (req.url.searchParams.get(\"offset\") as string) || \"0\",\n  };\n\n  const limit = parseInt(params.limit, 10);\n  const offset = parseInt(params.offset, 10);\n\n  return res(\n    json({\n      params: req,\n      limit,\n      offset,\n      total: cocktails.length,\n      data: cocktails.slice(offset, offset + limit),\n    })\n  );\n});\n","import { rest } from \"msw\";\n\nimport cocktails from \"../data/cocktails.json\";\n\nexport const popularRecipes = rest.get(\n  \"/api/recipes/popular\",\n  (req, res, { json }) => {\n    return res(\n      json({\n        cocktails,\n      })\n    );\n  }\n);\n","import { setupWorker } from \"msw\";\nimport { handlers } from \"./handlers\";\n\nexport const worker = setupWorker(...handlers);\n","import { MockedRequest } from \"msw\";\n\n/* eslint-disable */\n/* @ts-nocheck */\nexport const initMocks = () => {\n  console.log(\"👷🏻‍♂️ Adding MSW browser mocks\");\n  const { worker } = require(\"./browser\");\n  worker.start({\n    waitUntilReady: true,\n    serviceWorker: {\n      url: `${process.env.PUBLIC_URL}/mockServiceWorker.js`,\n    },\n    onUnhandledRequest: (req: MockedRequest) => {},\n  });\n};\n\ninitMocks();\n"],"names":["handlers","rest","req","res","json","params","limit","url","searchParams","get","offset","parseInt","total","cocktails","data","worker","setupWorker","initMocks","console","log","require","start","waitUntilReady","serviceWorker","process","onUnhandledRequest"],"sourceRoot":""}